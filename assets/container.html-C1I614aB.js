import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as t,e}from"./app-DGJnrheY.js";const p="/assets/coordinate-CUDrU30L.png",c="/assets/rendering_pipeline-HUYxv84k.jpg",o={};function i(l,a){return s(),t("div",null,a[0]||(a[0]=[e(`<h2 id="weblg-容器" tabindex="-1"><a class="header-anchor" href="#weblg-容器" aria-hidden="true">#</a> WebLG 容器</h2><p>在浏览器使用 canvas 作为 weblg 容器</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>canvas<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在声明canvas上下文对象时使用 weblg 作为 contextId</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> ctx <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">querySelector</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLCanvasElement<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;#canvas&quot;</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;webgl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="坐标系与绘制区间" tabindex="-1"><a class="header-anchor" href="#坐标系与绘制区间" aria-hidden="true">#</a> 坐标系与绘制区间</h2><div class="hint-container tip"><p class="hint-container-title">webgl使用的是正交右手坐标系 切每一个方向可使用的值的区间为0到1 超出该区间的图像不会绘制</p><p>x最左边为-1,最右边为1;<br> y轴最下边为-1，最上边为1;<br> z轴朝向你的方向最大值为1，远离你的方向最大值为-1;</p></div><div class="hint-container info"><p class="hint-container-title">注：这些值与Canvas的尺寸无关，无论Canvas的长宽比是多少，WebGl的区间值都是一致的。</p></div><figure><img src="`+p+'" alt="正交右手坐标系" tabindex="0" loading="lazy"><figcaption>正交右手坐标系</figcaption></figure><h2 id="webgl-渲染管线" tabindex="-1"><a class="header-anchor" href="#webgl-渲染管线" aria-hidden="true">#</a> WebGL 渲染管线</h2><p>渲染管线就像一条流水线，由一系列具有特定功能的数宇电路单元组成，下一个功能单元处理上一个功能单元生成的数据，逐级处理数据。<br> 顶点着色器和片元着色器是可编程的功能单元，拥有更大的自主性，还有光栅器、深度测试等不可编程的功能单元。CPU会通过WebGL APl和GPU通信，传递着色器程序和数据，GPU执行的着色器程序可以通过useProgram方法切换，传递数据就是把CPU主存中的数据传送到GPU的显存中。</p><figure><img src="'+c+'" alt="渲染管线" tabindex="0" loading="lazy"><figcaption>渲染管线</figcaption></figure>',12)]))}const d=n(o,[["render",i],["__file","container.html.vue"]]);export{d as default};
