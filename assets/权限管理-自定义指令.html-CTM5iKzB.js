const n=JSON.parse(`{"key":"v-0b78f439","path":"/note/vue/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4.html","title":"vue 响应式数高精度全局权限处理据原理","lang":"en-US","frontmatter":{"title":"vue 响应式数高精度全局权限处理据原理","date":"2023-10-12T00:00:00.000Z","tag":["vue"],"category":["Javascript/Typescript"],"description":"高精度全局权限处理 权限的控制由前端处理的场景很多，例如根据后台返回内容，判断该人是否对此功能有权限，进而去修改元素v-if / v-show，这种情况下，当这个功能在多处地方出现，就会导致我们做很多很多不必要的重复代码，如果判断条件繁琐的情况，更加冗余，代码量也会增加很多。因此我们可以造一个小车轮，挂在全局上对权限进行处理 在项目里新建一个common文件夹用于存放全局 .js 文件 这种全局文件夹做法相当普遍，一般项目里都应该有这样一个文件夹来管理全局的东西 // common/jurisdiction.js 用于存放与权限相关的全局函数/变量 export function checkJurisdiction(key) { // 权限数组 let jurisdictionList = ['1', '2', '3', '5'] let index = jurisdictionList.indexOf(key) if (index &gt; -1) { // 有权限 return true } else { // 无权限 return false } }","head":[["meta",{"property":"og:url","content":"https://export-nan.github.io/nan-blogs/note/vue/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4.html"}],["meta",{"property":"og:site_name","content":"NAN"}],["meta",{"property":"og:title","content":"vue 响应式数高精度全局权限处理据原理"}],["meta",{"property":"og:description","content":"高精度全局权限处理 权限的控制由前端处理的场景很多，例如根据后台返回内容，判断该人是否对此功能有权限，进而去修改元素v-if / v-show，这种情况下，当这个功能在多处地方出现，就会导致我们做很多很多不必要的重复代码，如果判断条件繁琐的情况，更加冗余，代码量也会增加很多。因此我们可以造一个小车轮，挂在全局上对权限进行处理 在项目里新建一个common文件夹用于存放全局 .js 文件 这种全局文件夹做法相当普遍，一般项目里都应该有这样一个文件夹来管理全局的东西 // common/jurisdiction.js 用于存放与权限相关的全局函数/变量 export function checkJurisdiction(key) { // 权限数组 let jurisdictionList = ['1', '2', '3', '5'] let index = jurisdictionList.indexOf(key) if (index &gt; -1) { // 有权限 return true } else { // 无权限 return false } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-10-12T10:01:14.000Z"}],["meta",{"property":"article:author","content":"NAN"}],["meta",{"property":"article:tag","content":"vue"}],["meta",{"property":"article:published_time","content":"2023-10-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-12T10:01:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vue 响应式数高精度全局权限处理据原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-12T10:01:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"NAN\\",\\"url\\":\\"https://github.com/open-nan\\"}]}"]]},"headers":[],"git":{"createdTime":1697104874000,"updatedTime":1697104874000,"contributors":[{"name":"NAN","email":"1066726487@qq.com","commits":1}]},"readingTime":{"minutes":1.48,"words":444},"filePathRelative":"note/vue/权限管理-自定义指令.md","localizedDate":"October 12, 2023","excerpt":"<h1> 高精度全局权限处理</h1>\\n<p>权限的控制由前端处理的场景很多，例如根据后台返回内容，判断该人是否对此功能有权限，进而去修改元素v-if / v-show，这种情况下，当这个功能在多处地方出现，就会导致我们做很多很多不必要的重复代码，如果判断条件繁琐的情况，更加冗余，代码量也会增加很多。因此我们可以造一个小车轮，挂在全局上对权限进行处理</p>\\n<p>在项目里新建一个common文件夹用于存放全局 .js 文件<br>\\n这种全局文件夹做法相当普遍，一般项目里都应该有这样一个文件夹来管理全局的东西</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// common/jurisdiction.js  用于存放与权限相关的全局函数/变量</span>\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function\\">checkJurisdiction</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">key</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 权限数组</span>\\n    <span class=\\"token keyword\\">let</span> jurisdictionList <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token string\\">'1'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'2'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'3'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">'5'</span><span class=\\"token punctuation\\">]</span>\\n    <span class=\\"token keyword\\">let</span> index <span class=\\"token operator\\">=</span> jurisdictionList<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">indexOf</span><span class=\\"token punctuation\\">(</span>key<span class=\\"token punctuation\\">)</span>\\n\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>index <span class=\\"token operator\\">&gt;</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 有权限</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">true</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 无权限</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token boolean\\">false</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
