import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as e,e as n}from"./app-rkgOiK7U.js";const s={};function r(i,t){return a(),e("div",null,t[0]||(t[0]=[n(`<h2 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字" aria-hidden="true">#</a> 关键字</h2><table><thead><tr><th>关键字</th><th>含义</th><th>关键字</th><th>含义</th></tr></thead><tbody><tr><td>abstract</td><td>表明类或者成员方法具有抽象属性</td><td>assert</td><td>用来进行程序调试</td></tr><tr><td>boolean</td><td>基本数据类型之一，布尔类型</td><td>break</td><td>提前跳出一个块</td></tr><tr><td>byte</td><td>基本数据类型之一，字节类型</td><td>case</td><td>用在switch语句之中，表是其中的一个分支</td></tr><tr><td>catch</td><td>用在异常处理中，用来捕捉异常</td><td>char</td><td>基本数据类型之一，字符类型</td></tr><tr><td>class</td><td>类</td><td>const</td><td>保留关键字，没有具体含义</td></tr><tr><td>continue</td><td>回到一个块的开始处</td><td>default</td><td>默认，例如，用在switch语句中，表明一个默认的分支</td></tr><tr><td>do</td><td>用在do-while循环结构中</td><td>double</td><td>基本数据类型之一，双精度浮点数类型</td></tr><tr><td>else</td><td>用在条件语句中，表明当条件不成立时的分支</td><td>enum</td><td>枚举</td></tr><tr><td>extends</td><td>表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</td><td>final</td><td>用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变</td></tr><tr><td>finally</td><td>用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</td><td>float</td><td>基本数据类型之一，单精度浮点数类型</td></tr><tr><td>for</td><td>一种循环结构的引导词</td><td>goto</td><td>保留关键字，没有具体含义</td></tr><tr><td>if</td><td>条件语句的引导词</td><td>implements</td><td>表明一个类实现了给定的接口</td></tr><tr><td>import</td><td>表明要访问指定的类或包</td><td>instanceof</td><td>用来测试一个对象是否是指定类型的实例对象</td></tr><tr><td>int</td><td>基本数据类型之一，整数类型</td><td>interface</td><td>接口</td></tr><tr><td>long</td><td>基本数据类型之一，长整数类型</td><td>native</td><td>用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的</td></tr><tr><td>new</td><td>用来创建新实例对象</td><td>package</td><td>包</td></tr><tr><td>private</td><td>一种访问控制方式：私用模式</td><td>protected</td><td>一种访问控制方式：保护模式</td></tr><tr><td>public</td><td>一种访问控制方式：共用模式</td><td>return</td><td>从成员方法中返回数据</td></tr><tr><td>short</td><td>基本数据类型之一,短整数类型</td><td>static</td><td>表明具有静态属性</td></tr><tr><td>strictfp</td><td>用来声明FP_strict（单精度或双精度浮点数）表达式遵循IEEE</td><td>super</td><td>表明当前对象的父类型的引用或者父类型的构造方法</td></tr><tr><td>switch</td><td>分支语句结构的引导词</td><td>synchronized</td><td>表明一段代码需要同步执行</td></tr><tr><td>this</td><td>指向当前实例对象的引用</td><td>throw</td><td>指向当前实例对象的引用</td></tr><tr><td>throws</td><td>声明在当前定义的成员方法中所有需要抛出的异常</td><td>transient</td><td>声明不用序列化的成员域</td></tr><tr><td>try</td><td>尝试一个可能抛出异常的程序块</td><td>void</td><td>声明当前成员方法没有返回值</td></tr><tr><td>volatile</td><td>表明两个或者多个变量必须同步地发生变化</td><td>while</td><td>用在循环结构中</td></tr></tbody></table><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p>内置数据类型</p><table><thead><tr><th>类型</th><th>含义</th><th>最大值/最小值</th><th>默认值</th><th></th></tr></thead><tbody><tr><td>byte</td><td>8位、有符号的，以二进制补码表示的整数</td><td>-128（-2^7） <br> 127（2^7-1）</td><td>0</td><td>用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一</td></tr><tr><td>short</td><td>16位、有符号的以二进制补码表示的整数</td><td>-32768（-2^15） <br> 32767（2^15 - 1）</td><td>0</td><td>short 也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一</td></tr><tr><td>int</td><td>32位、有符号的以二进制补码表示的整数</td><td>-2,147,483,648（-2^31） <br> 2,147,483,647（2^31 - 1）</td><td>0</td><td>一般地整型变量默认为 int 类型</td></tr><tr><td>long</td><td>64 位、有符号的以二进制补码表示的整数</td><td>-9,223,372,036,854,775,808（-2^63） <br> 9,223,372,036,854,775,807（2^63 -1）</td><td>0L</td><td>这种类型主要使用在需要比较大整数的系统上</td></tr><tr><td>float</td><td>单精度、32位、符合IEEE 754标准的浮点数</td><td></td><td>0.0f</td><td>在储存大型浮点数组的时候可节省内存空间,</td></tr><tr><td>double</td><td>双精度、64 位、符合 IEEE 754 标准的浮点数</td><td></td><td>0.0d</td><td>浮点数的默认类型为 double 类型</td></tr><tr><td>boolean</td><td>表示一位的信息</td><td></td><td>false</td><td>只有两个取值：true 和 false</td></tr><tr><td>char</td><td>一个单一的 16 位 Unicode 字符</td><td>\\u0000 <br> \\uffff</td><td></td><td>char 数据类型可以储存任何字符</td></tr></tbody></table><p>引用类型</p><ul><li>在Java中，引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型。变量一旦声明后，类型就不能被改变了。</li><li>对象、数组都是引用数据类型。</li><li>所有引用类型的默认值都是null。</li><li>一个引用变量可以用来引用任何与之兼容的类型。</li></ul><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h2><ul><li>单行注释: //注释文字</li><li>多行注释: /* 注释文字 */</li><li>文档注释: /** 注释文字 */</li></ul><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p>在 Java 语言中, 声明变量的基本格式如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// type identifier [= value][, identifier [= value] ...];</span>
<span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>         <span class="token comment">// 声明三个int型整数：a、 b、c</span>
<span class="token keyword">byte</span> z <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>         <span class="token comment">// 声明并初始化 z</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">&quot;runoob&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// 声明并初始化字符串 s</span>
<span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span> <span class="token comment">// 声明了双精度浮点型变量 pi</span>
<span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token char">&#39;x&#39;</span><span class="token punctuation">;</span>        <span class="token comment">// 声明变量 x 的值是字符 &#39;x&#39;。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变量类型" tabindex="-1"><a class="header-anchor" href="#变量类型" aria-hidden="true">#</a> 变量类型</h3><p>局部变量（Local Variables）：</p><ul><li>在方法、构造函数或块内部声明</li><li>在声明的方法、构造函数或块执行结束后被销毁</li><li>在声明时需要初始化，否则会导致编译错误。</li></ul><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>public void exampleMethod() {
    int localVar = 10; // 局部变量
    // ...
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例变量（Instance Variables）：</p><ul><li>在类中声明，但在方法、构造函数或块之外，它们属于类的实例，每个类的实例都有自己的副本，</li><li>如果不明确初始化，实例变量会被赋予默认值（数值类型为0，boolean类型为false，对象引用类型为null）。</li></ul><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>public class ExampleClass {
    int instanceVar; // 实例变量
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>静态变量或类变量（Class Variables）：</p><ul><li>类变量是在类中用 static 关键字声明的变量，它们属于类而不是实例，</li><li>所有该类的实例共享同一个类变量的值，类变量在类加载时被初始化，而且只初始化一次。</li></ul><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>public class ExampleClass {
    static int classVar; // 类变量
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数变量（Parameters）：</p><ul><li>参数是方法或构造函数声明中的变量，用于接收调用该方法或构造函数时传递的值</li><li>参数变量的作用域只限于方法内部。</li></ul><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>public void exampleMethod(int parameterVar) {
    // 参数变量
    // ...
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常量" tabindex="-1"><a class="header-anchor" href="#常量" aria-hidden="true">#</a> 常量</h2><p>常量在程序运行时是不能被修改的。</p><p>在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.1415927</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了便于识别，通常使用大写字母表示常量</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2>`,31)]))}const o=d(s,[["render",r],["__file","grammer-base.html.vue"]]);export{o as default};
